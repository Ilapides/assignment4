{"version":3,"sources":["components/Cell.js","components/Row.js","components/Grid.js","components/Buttons.js","components/App.js","serviceWorker.js","index.js"],"names":["Cell","props","style","backgroundColor","cellColor","onClick","clickColorCell","rowIndex","colIndex","onMouseDown","depress","onMouseUp","onMouseOver","dragColorCell","Row","cols","map","index","Grid","rows","className","col","Buttons","addRow","addCol","removeRow","removeCol","selectColor","fillAll","fillUncolored","clearAll","onChange","value","App","addedRow","currentRows","state","currentNumRows","numRows","currentNumCols","numCols","setState","push","i","pop","selection","chosenColor","target","changeAll","colorCell","isClick","depressed","currentColor","bind","newColor","onlyBlank","selectedColor","this","j","toggle","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.86662dcb.chunk.js","sourcesContent":["import React from 'react';\nimport '../styles/Cell.css';\n\n/*\n\tCell is a display object\n\tIt takes props\n\tAnd returns a <td> element with a background color\n\n\tIt also responds to mouse events\n*/\nconst Cell = (props) => {\n\treturn (\n\t\t<td\n\t\t\tstyle={{\n\t\t\t\tbackgroundColor: props.cellColor\n\t\t\t}}\n\t\t\tonClick = {\n\t\t\t\t() => {\n\t\t\t\t\tprops.clickColorCell(props.rowIndex, props.colIndex)\n\t\t\t\t}\n\t\t\t}\n\t\t\tonMouseDown = { \n\t\t\t\t() => {\n\t\t\t\t\tprops.depress(true);\n\t\t\t\t}\n\t\t\t}\n\t\t\tonMouseUp = {\n\t\t\t\t() => {\n\t\t\t\t\tprops.depress(false);\n\t\t\t\t}\n\t\t\t}\n\t\t\tonMouseOver = {\n\t\t\t\t() => {\n\t\t\t\t\tprops.dragColorCell(props.rowIndex, props.colIndex);\n\t\t\t\t}\n\t\t\t}\n\t\t/>\n\t);\n}\n\nexport default Cell;","import React from 'react';\nimport Cell from './Cell.js';\n\n/*\n\tRow is a display component\n\tIt takes props\n\tAnd returns a <tr> of Cell objects\n*/\nconst Row = (props) => {\n\treturn (\n\t\t// For each element of a row array,\n\t\t// Map it to a Cell object with a given color\n\t\t<tr>\n\t\t\t{props.cols.map((cellColor, index) => \n\t\t\t\t<Cell\n\t\t\t\t\t// Cell payload: color\n\t\t\t\t\tcellColor = {cellColor}\n\t\t\t\t\t// Indexing to access a specific cell\n\t\t\t\t\trowIndex = {props.rowIndex}\n\t\t\t\t\tcolIndex = {index}\n\t\t\t\t\t// Cell-coloring functions\n\t\t\t\t\tclickColorCell = {props.clickColorCell}\n\t\t\t\t\tdragColorCell = {props.dragColorCell}\n\t\t\t\t\t// Depress toggle function\n\t\t\t\t\tdepress = {props.depress}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</tr>\n\t);\n}\n\nexport default Row;","import React from 'react';\nimport Row from './Row.js';\n\n/*\n   Grid is a display object\n   It takes the rows array from app\n   And displays a table of Row objects\n*/\nconst Grid = ({rows, clickColorCell, dragColorCell, depress}) => {\n   return(\n      <tbody className = \"centerTable\">\n         {rows.map((col, index) => (\n\t\t\t\t<Row\n            \trowIndex = {index}\n               cols = {col}\n               clickColorCell = {clickColorCell}\n               dragColorCell = {dragColorCell}\n               depress = {depress}\n\t\t\t\t/>\n\t\t\t))}\n      </tbody>\n    )\n};\n\nexport default Grid;","import React from 'react';\nimport '../styles/Buttons.css';\n\nconst Buttons = ({addRow, addCol, removeRow, removeCol, selectColor, fillAll, fillUncolored, clearAll}) => {\n\treturn (\n\t\t<div className = \"center\">\n\t\t\t<div className = \"centerIn\">\n\t\t\t\t<button onClick = {addRow}>Add Row</button>\n\t\t\t\t<button onClick = {addCol}>Add Column</button>\n\t\t\t\t<button onClick = {removeRow}>Remove Row</button>\n\t\t\t\t<button onClick = {removeCol}>Remove Column</button>\n\t\t\t</div>\n\t\t\t<div className = \"centerIn\">\n\t\t\t\t<select onChange={selectColor}>\n\t\t\t\t\t<option value=\"White\">White</option>\n\t\t\t\t\t<option value=\"Red\">Red</option>\n\t\t\t\t\t<option value=\"Orange\">Orange</option>\n\t\t\t\t\t<option value=\"Yellow\">Yellow</option>\n\t\t\t\t\t<option value=\"Green\">Green</option>\n\t\t\t\t\t<option value=\"Blue\">Blue</option>\n\t\t\t\t\t<option value=\"Indigo\">Indigo</option>\n\t\t\t\t\t<option value=\"Violet\">Violet</option>\n\t\t\t\t</select>\n\t\t\t\t<button onClick = {fillAll}>Fill All</button>\n\t\t\t\t<button onClick = {fillUncolored}>Fill All Uncolored</button>\n\t\t\t\t<button onClick = {clearAll}>Reset Colors</button>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Buttons","import React, {Component} from 'react';\nimport Grid from \"./Grid.js\"\nimport Buttons from \"./Buttons.js\"\nimport '../styles/App.css';\n\n\n/*\n\tApp is a control component\n\tIt holds the table state in `rows`\n\tIt has control UI (buttons)\n\tIt has a display object Grid\n*/\nclass App extends Component{\n\t// Constructor for App component\n  \tconstructor(props){\n   \tsuper(props);\n\t\t\n\t\t// State initialized to empty table\n\t\tthis.state = {\n\t\t\trows: [],\n\t\t\tnumRows: 0,\n\t\t\tnumCols: 0,\n\t\t\tchosenColor: \"White\",\n\t\t\tdepressed: false,\n\t\t};\n\n\t\tthis.depress = this.depress.bind(this);\n  \t}\n\n\t// Add Row function\n\taddRow = () => {\n\t\t// Create a new array which will hold the new row to be added\n\t\tlet addedRow = [];\n\t\t// Access the current table state `rows`\n\t\tvar currentRows = this.state.rows;\n\t\tconst currentNumRows = this.state.numRows;\n\t\tconst currentNumCols = this.state.numCols;\n\t\t// If there is nothing in the table, now there should be a 1x1 table\n\t\tif (currentNumRows === 0){\n\t\t\tthis.setState(\n\t\t\t\t{\n\t\t\t\t\tnumRows: 1,\n\t\t\t\t\tnumCols: 1\n\t\t\t\t},\t\n\t\t\t);\n\t\t\tlet addedCell = \"White\";\n\t\t\taddedRow.push(addedCell);\n\t\t}\n\t\t// Otherwise, add one row to the table\n\t\telse {\n\t\t\tthis.setState(\n\t\t\t\t{numRows: currentNumRows + 1},\n\t\t\t);\n\t\t\t// Add `currentNumCols` number of new cells to the row to be added\n\t\t\tfor (let i = 0; i < currentNumCols; i++){\n\t\t\t\tlet addedCell = \"White\";\n\t\t\t\taddedRow.push(addedCell);\n\t\t\t}\n\t\t}\n\t\t// Update table state\n\t\tcurrentRows.push(addedRow);\n\t\tthis.setState({rows: currentRows});\n\t}\n\n\t// Add column function\n\taddCol = () => {\n\t\t// Access the current table state `rows`\n\t\tvar currentRows = this.state.rows;\n\t\tconst currentNumRows = this.state.numRows;\n\t\tconst currentNumCols = this.state.numCols;\n\t\t// If there is nothing in the table, now there should be a 1x1 table\n\t\tif (currentNumRows === 0){\n\t\t\tlet addedRow = [];\n\t\t\tlet addedCell = \"White\";\n\t\t\taddedRow.push(addedCell);\t\t\t\n\t\t\tcurrentRows.push(addedRow);\n\t\t\tthis.setState(\n\t\t\t\t{\n\t\t\t\t\tnumRows: 1,\n\t\t\t\t\tnumCols: 1,\n\t\t\t\t},\t\n\t\t\t);\n\t\t}\n\t\t// Otherwise, add one cell to each row of the table\n\t\telse {\n\t\t\tthis.setState(\n\t\t\t\t{numCols: currentNumCols + 1},\n\t\t\t);\n\t\t\tfor (let i = 0; i < currentNumRows; i++){\n\t\t\t\tlet addedCell = \"White\";\n\t\t\t\tcurrentRows[i].push(addedCell);\n\t\t\t}\n\t\t}\n\t\t// Update table state\n\t\tthis.setState({rows: currentRows});\n\n\t\t// Need to bind App's `this` for functions passed to Cell\n\n\t}\n\n\t// Remove row function\n\tremoveRow = () => {\n\t\tconst currentNumRows = this.state.numRows;\n\t\t// If there are fewer than 2 rows, the table is now empty\n\t\tif (currentNumRows < 2){\n\t\t\tthis.setState(\n\t\t\t\t{\n\t\t\t\t\tnumRows: 0,\n\t\t\t\t\tnumCols: 0,\n\t\t\t\t\trows: [],\n\t\t\t\t},\t\n\t\t\t);\n\t\t}\n\t\t// Otherwise, remove the last row of the table\n\t\telse{\n\t\t\tlet currentRows = this.state.rows;\n\t\t\tcurrentRows.pop();\n\t\t\tthis.setState(\n\t\t\t\t{\n\t\t\t\t\tnumRows: currentNumRows - 1,\n\t\t\t\t\trows: currentRows,\n\t\t\t\t},\t\n\t\t\t);\n\t\t}\n\t}\n\n\t// Remove Column function\n\tremoveCol = () => {\n\t\tconst currentNumCols = this.state.numCols;\n\t\tconst currentNumRows = this.state.numRows;\n\t\t// If there are fewer than 2 columns, the table is now empty\n\t\tif (currentNumCols < 2){\n\t\t\tthis.setState(\n\t\t\t\t{\n\t\t\t\t\tnumRows: 0,\n\t\t\t\t\tnumCols: 0,\n\t\t\t\t\trows: [],\n\t\t\t\t},\t\n\t\t\t);\n\t\t}\n\t\t// Otherwise, iterate through each row array and delete the last element representing a cell\n\t\telse{\n\t\t\tlet currentRows = this.state.rows;\n\t\t\tfor (let i = 0; i < currentNumRows; i++){\n\t\t\t\tcurrentRows[i].pop();\n\t\t\t}\n\t\t\tthis.setState(\n\t\t\t\t{\n\t\t\t\t\tnumCols: currentNumCols - 1,\n\t\t\t\t\trows: currentRows\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t}\n\n\t// Color selection function\n\tselectColor = (selection) => {\n\t\tthis.setState({ \n\t\t\tchosenColor: selection.target.value \n\t\t});\n\t}\n\n\t// DRY function which implements all three mass change functions\n\tchangeAll(newColor, onlyBlank) {\n\t\tvar selectedColor;\n\t\tconst currentNumCols = this.state.numCols;\n\t\tconst currentNumRows = this.state.numRows;\n\t\tif (newColor) {\n\t\t\tselectedColor = this.state.chosenColor;\n\t\t}\n\t\telse {\n\t\t\tselectedColor = \"White\";\n\t\t}\n\t\tvar currentRows = this.state.rows;\n\t\tfor (let i = 0; i < currentNumRows; i++){\n\t\t\tfor (let j = 0; j < currentNumCols; j++){\n\t\t\t\tif (!onlyBlank || currentRows[i][j] === \"White\"){\n\t\t\t\t\tcurrentRows[i][j] = selectedColor;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.setState({\n\t\t\trows: currentRows\n\t\t});\n\t}\n\n\t// Fill All with chosen color function\n\tfillAll = () => {\n\t\tthis.changeAll(true, false);\n\t}\n\n\n\t// Fill All Uncolored with chosen color function\n\tfillUncolored = () => {\n\t\tthis.changeAll(true, true);\n\t}\n\n\n\t// Clear All function\n\tclearAll = () => {\n\t\tthis.changeAll(false, false);\n\t}\n\n\t// Cell coloring function\n\t// To be passed as a prop to grid -> row -> cell\n\tcolorCell = (rowIndex, colIndex, isClick) => {\n\t\tif (!(isClick || this.state.depressed)) return;\n\t\tvar currentRows = this.state.rows;\n\t\tconst currentColor = this.state.chosenColor;\n\t\tcurrentRows[rowIndex][colIndex] = currentColor;\n\t\tthis.setState({\n\t\t\trows: currentRows\n\t\t});\n\t}\n\n\tclickColorCell = (rowIndex, colIndex) => {\n\t\tthis.colorCell(rowIndex, colIndex, true);\n\t}\n\n\tdragColorCell = (rowIndex, colIndex) => {\n\t\tthis.colorCell(rowIndex, colIndex, false);\n\t}\n\n\tdepress(toggle) {\n\t\tif (toggle) {\n\t\t\tthis.setState({\n\t\t\t\tdepressed: true\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tthis.setState({\n\t\t\t\tdepressed: false\n\t\t\t});\n\t\t}\n\t}\n\n\t// Render function\n\trender(){\n   \treturn(\n\t\t\t<div>\n\t\t\t\t{/* Button Div */}\n\t\t\t\t<Buttons\n\t\t\t\t\taddRow = {this.addRow}\n\t\t\t\t\taddCol = {this.addCol}\n\t\t\t\t\tremoveRow = {this.removeRow}\n\t\t\t\t\tremoveCol = {this.removeCol}\n\t\t\t\t\tselectColor = {this.selectColor}\n\t\t\t\t\tfillAll = {this.fillAll}\n\t\t\t\t\tfillUncolored = {this.fillUncolored}\n\t\t\t\t\tclearAll = {this.clearAll}\n\t\t\t\t/>\n\t\t\t\t{/* Table Object holding Grid */}\t\t\t\n\t\t\t\t<table>\n\t\t\t\t\t<Grid className = \"center\"\n\t\t\t\t\t\t// 2D array of colored cells\n\t\t\t\t\t\trows = {this.state.rows}\n\t\t\t\t\t\t// Tally of dimensions\n\t\t\t\t\t\tnumCols = {this.state.numCols}\n\t\t\t\t\t\tnumRows = {this.state.numRows}\n\t\t\t\t\t\t// Cell-coloring functions\n\t\t\t\t\t\tclickColorCell = {this.clickColorCell}\n\t\t\t\t\t\tdragColorCell = {this.dragColorCell}\n\t\t\t\t\t\t// Depress toggle function\n\t\t\t\t\t\tdepress = {this.depress}\n\t\t\t\t\t/>\n\t\t\t\t</table>\n\t\t\t</div>\n    \t);\n  \t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}